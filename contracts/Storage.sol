// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Storage {
    // keccak256(key . slot)
    mapping(uint => uint) public aa; // slot 0
    mapping(address => uint) public bb; // slot 1

    // keccak256(slot) + index of the item
    uint[] public cc; // slot 2
    // web3.eth.getStorageAt("0xba3462c2bB0120D809FAD35342455529b8a79780",2)
    //              Address of Storage => 0xba3462c2bB0120D809FAD35342455529b8a79780 at slot => 2 returns length of array.

    uint8 public a = 7; // 1 byte = 8 bits
    uint16 public b = 10; // 2 bytes
    address public c = 0x84034473eF698c54E7Bb5eC836e8c2a5698b390c; // 20 bytes
    bool d = true; // 1 byte
    uint64 public e = 15; // 8 bytes
    // 32 bytes, all values will be stored in slot 3
    //0x000000000000000f0184034473ef698c54e7bb5ec836e8c2a5698b390c000a07 -> slot 3
    // 0x00000000000000         0f      01          84034473ef698c54e7bb5ec836e8c2a5698b390c        000a        07
    //                        e = 15   d = true     c = 0x84034473eF698c54E7Bb5eC836e8c2a5698b390c  b = 10     a = 7;
    // values are stored in hexadecimal

    uint256 public f = 200; // 32 bytes -> slot 4
    // 0x00000000000000000000000000000000000000000000000000000000000000 c8 -> slot 4
    // values are in hexadecimal                                       f = 200

    uint8 public g = 40; // 1 byte -> slot 5
    // 0x00000000000000000000000000000000000000000000000000000000000000 28 -> slot 5
    // values are in hexadecimal                                       g = 40

    uint256 public h = 789; // 32 bytes -> slot 6

    // 0x0000000000000000000000000000000000000000000000000000000000000 315-> slot 6
    // values are in hexadecimal                                      h = 789

    // Note:- above values are stored in seperate slot's because by default one
    // slot can store only 32 bytes of value at a time.

    // In ganache we will see values as:-
    // { //8 items
    // a:uint7
    // b:uint10
    // c:address"0x84034473eF698c54E7..."
    // d:booltrue
    // e:uint15
    // f:uint128 -> hexadecimal value of -> uint256 public f = 200;
    // g:uint28 -> hexadecimal value of ->  uint8 public g = 40;
    // h:uint315 -> hexadecimal value of -> uint256 public h = 789
    //}

    constructor() {
        cc.push(1); // 0
        cc.push(10); // 1
        cc.push(100); // 2

        aa[2] = 4;
        aa[3] = 10;

        bb[0x84034473eF698c54E7Bb5eC836e8c2a5698b390c] = 100;
    }
}

// 0x0000000000000000000000000000000000000000000000000000000000000000 -> 32 bytes or 64 characters
// 0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000 -> 64 bytes or 128 characters
// ranges from 2^256 to 2^256-1

// uint8 -> 2^256-1 max 255 characters

// aa[2] = 4;
// 0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000 -> slot 0
// above code is hexadecimal and when converted to keccak256 it's value is -> 0xabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a569
// web3.eth.getStorageAt("0x34Abe236122eA9bdd3F162354FbEb157cb1fbB7c", "0xabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a569")

//  aa[3] = 10;
// 0x00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000 -> slot 0
// above code is hexadecimal and when converted to keccak256 it's value is -> 101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d83
//web3.eth.getStorageAt("0x34Abe236122eA9bdd3F162354FbEb157cb1fbB7c", "0x101e368776582e57ab3d116ffe2517c0a585cd5b23174b01e275c2d8329c3d83")

// bb[0x84034473eF698c54E7Bb5eC836e8c2a5698b390c] = 100;
// 0x00000000000000000000000084034473eF698c54E7Bb5eC836e8c2a5698b390c0000000000000000000000000000000000000000000000000000000000000001 -> slot 1
// above code is hexadecimal and when converted to keccak256 it's value is -> 9b0d5422d4731fae7cd3c32cec66d611ab58d287d72036361815bd635605ea5a
// web3.eth.getStorageAt("0x34Abe236122eA9bdd3F162354FbEb157cb1fbB7c", "0x9b0d5422d4731fae7cd3c32cec66d611ab58d287d72036361815bd635605ea5a")

// keccak256(slot) + index of the item i.e. At slot 2 + 0 index => 0000000000000000000000000000000000000000000000000000000000000002 +0 = 0000000000000000000000000000000000000000000000000000000000000002
// 0000000000000000000000000000000000000000000000000000000000000002 => element at cc[0] = 1;

// keccak256(slot) + index of the item i.e. => At slot 2 + 1 index => 0000000000000000000000000000000000000000000000000000000000000002 => convert to decimal
// i.e. 29102676481673041902632991033461445430619272659676223336789171408008386403022 +1 = 29102676481673041902632991033461445430619272659676223336789171408008386403023 now convert back to hex
// i.e. now we get updated hex value as 405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACF
// 0000000000000000000000000000000000000000000000000000000000000002 -> slot 2
// decimal value of above is 29102676481673041902632991033461445430619272659676223336789171408008386403022 + 1 = 29102676481673041902632991033461445430619272659676223336789171408008386403023
// 29102676481673041902632991033461445430619272659676223336789171408008386403023 => to hex => 405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACF
// web3.eth.getStorageAt("0xba3462c2bB0120D809FAD35342455529b8a79780","0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACF") => => element at cc[1] = 10;

// keccak256(slot) + index of the item i.e. => At slot 2 + 2 index => 0000000000000000000000000000000000000000000000000000000000000002 => convert to decimal
// i.e. 29102676481673041902632991033461445430619272659676223336789171408008386403022 +2 = 29102676481673041902632991033461445430619272659676223336789171408008386403024 now convert back to hex
// i.e. now we get updated hex value as 405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5AD0
// 0000000000000000000000000000000000000000000000000000000000000002 -> slot 2
// decimal value of above is 29102676481673041902632991033461445430619272659676223336789171408008386403022 + 1 = 29102676481673041902632991033461445430619272659676223336789171408008386403024
// 29102676481673041902632991033461445430619272659676223336789171408008386403024 => to hex => 405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5AD0
// web3.eth.getStorageAt("0xba3462c2bB0120D809FAD35342455529b8a79780","0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5AD0") => => element at cc[2] = 100;
