Original ByteCode: "0x6080604052348015600f57600080fd5b50604580601d6000396000f3fe 608060405236600a57005b600080fdfea26469706673582212202c1a6dc33fc62b99067a2a309bd7c1cde792f45fa44a33730af0cd269e641a9164736f6c63430008040033"

                                                                                 ^
                                                                                 |
                                                                                (Start copying values from here onward)[0x1d]       
Bytecode:-    60  80  60  40  52  34  80  15  60  0f  57  60  00  80  fd  5b  50  60  45  80  60  1d  60  00  39  60  00  f3  fe

Array:-        0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  

                                                                           ^
                                                                           |
                                                                          Jump  
                                                                (0x5b -> JUMPDEST  --> Mark a valid destination for jumps) 
// STACK (0x60-> PUSH1 --> Push 1 Byte into a Stack)
        // In case we are sending ether here in our Bytecode then if we have an instruction 0xf5[0xfd -> REVERT --> Halt execution reverting state changes but returning data and remaining gas.]. It will revert the ether value
        // [0xfe -> INVALID ∅ ∅  --> Designated invalid instruction.](initialization of code finishes here)
        // [0xf3 -> RETURN Remove: 2 Add: 0 --> Halt execution returning output data]
0x00
0x45
        // Stack[0]: Memory offset to write. [0x39 -> CODECOPY --> Copy code running in current environment to memory]
        // Stack[1]: Bytecode offset to read from.
        // Stack[2]: Length of a bytecode to copy.
0x00
0x1d    // (0x1d gives value 29 which means after 29th Byte start copying values)
0x45    // (0x45 is telling how many Bytes to copy after the 29th Byte position i.e 69 Byte if convert 0x45[hex to dec] which is rest of the string of bytecode after 29th position)
0x45
        // Now Stack is empty [0x50 -> POP --> Remove item from stack.]
        // Remove top 2 elements from the Stack [0x57 -> JUMPI --> 2: Remove 0: Add]
0x0f    [0x57 -> JUMPI --> Conditionally alter the program counter. If Stack[1]== 1, then jump to Stack[0]]
0x00    [0x80 -> DUP1 --> 2 Duplicate 1st stack it] -> [Since Last item in stack is 0x00 (0x15) will change it to 0x01]
0x00
0x40    // Once Pushed from Stack to memory clear it from Stack
0x80    // Once Pushed from Stack to memory clear it from Stack


// MEMORY (0x52-> MSTORE --> Save word to memory)

   - Memory[0x40] = 0x80  // Free memory pointer
   - Memory[0x00] = code to copy

// VALUE (in Ether) [0x34 -> CALLVALUE --> Get deposited value by the instruction/transaction responsible for
   - This execution (Currently we are not doing any transaction so value is 0x00)]

// IS TOP OF STACK ZERO? (0x15 -> ISZERO -->  Simple not operator)

// Extra--
switch(0x23232323){
        case 0x231323123: {}
        case 0xad23123: {}
        case 0x2354a215: {}
        case 0xd4f56321f: {}

}

Yellow Paper References :- https://ethereum.github.io/yellowpaper/paper.pdf

// how is Block Header Calculated
RLP (“recursive length prefix”) encoding is the main serialization format used in Ethereum,
and is used everywhere - for blocks, transactions, account state data and
wire protocol messages.

Block Header Architecture:
https://i.stack.imgur.com/afWDt.jpg

How header is encoded
https://ethereum.stackexchange.com/questions/67280/block-header-hash-calculation

Encoder
https://toolkit.abdk.consulting/ethereum#rlp

About RLP encoding
https://medium.com/coinmonks/data-structure-in-ethereum-episode-1-recursive-length-prefix-rlp-encoding-decoding-d1016832f919

Etherem Live view
http://ethviewer.live/


bits, bytes, words
https://www.youtube.com/watch?v=Weyv-V8xz0c

EVMs, and Bytecode
https://www.youtube.com/watch?v=RxL_1AfV7N4

Memory in computer:
https://www.youtube.com/watch?v=F0Ri2TpRBBg

